import {inject} from '@angular/core';
import {CanActivateFn, Router} from '@angular/router';
import {AuthService} from './auth.service';
import {Observable} from 'rxjs';

export const publicGuard: CanActivateFn = () => {
  const authService = inject(AuthService);
  const router = inject(Router);

  console.log('ğŸ”“ publicGuard executado');

  // Se o serviÃ§o ainda nÃ£o foi inicializado, aguarda
  if (!authService.isInitialized) {
    console.log('ğŸ”“ Aguardando inicializaÃ§Ã£o do AuthService...');
    return new Observable(observer => {
      authService.waitForInitialization().then(() => {
        console.log('ğŸ”“ InicializaÃ§Ã£o concluÃ­da, verificando se deve bloquear acesso pÃºblico...');

        // ApÃ³s inicializaÃ§Ã£o, verifica se estÃ¡ logado
        if (authService.isLoggedIn() && authService.currentUserValue) {
          console.log('ğŸ”“ UsuÃ¡rio jÃ¡ logado, redirecionando para home');
          router.navigate(['/home']);
          observer.next(false);
        } else {
          console.log('ğŸ”“ UsuÃ¡rio nÃ£o logado, permitindo acesso Ã  pÃ¡gina pÃºblica');
          observer.next(true);
        }
        observer.complete();
      }).catch(error => {
        console.error('ğŸ”“ Erro na inicializaÃ§Ã£o:', error);
        // Em caso de erro, permite acesso Ã  pÃ¡gina pÃºblica
        observer.next(true);
        observer.complete();
      });
    });
  }

  // Se jÃ¡ foi inicializado, faz a verificaÃ§Ã£o direta
  console.log('ğŸ”“ AuthService jÃ¡ inicializado');

  if (authService.isLoggedIn() && authService.currentUserValue) {
    console.log('ğŸ”“ UsuÃ¡rio jÃ¡ logado, redirecionando para home');
    router.navigate(['/home']);
    return false;
  }

  console.log('ğŸ”“ UsuÃ¡rio nÃ£o logado, permitindo acesso Ã  pÃ¡gina pÃºblica');
  return true;
};
